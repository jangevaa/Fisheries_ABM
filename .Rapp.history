spawning_map = as.matrix(read.csv("masks/spawning.csv", header=T))#
spawning_melt = melt(spawning_map)
spawning_melt
spawning_map = as.matrix(read.csv("masks/spawning.csv", header=F))#
spawning_melt = melt(spawning_map)
spawning_melt
spawning_map = as.matrix(read.csv("masks/spawning.csv", header=F))#
col.names(spawning_map) = NULL
colnames(spawning_map) = NULL
spawning_melt = melt(spawning_map)
spawning_melt
summary(spawning_metl)
summary(spawning_melt)
spawning_melt=spawning_melt[spawning_melt$value==1,]
spawning_melt
spawning_melt=spawning_melt[spawning_melt$value==1,]
spawning_melt
spawning_map = as.matrix(read.csv("masks/spawning.csv", header=F))#
colnames(spawning_map) = NULL#
spawning_melt = melt(spawning_map)
summary(spawning_melt)
spawning_melt$value==1
spawning_melt = melt(spawning_map)#
spawning_melt=spawning_melt[-is.na(spawning_melt$value==1),]
spawning_melt
spawning_melt = melt(spawning_map)#
spawning_melt=spawning_melt[-is.na(spawning_melt),]
spawning_melt
spawning_melt = melt(spawning_map)#
spawning_melt=spawning_melt[-is.na(spawning_melt$values),]
summary(spawning_melt)
spawning_melt=spawning_melt[-is.na(spawning_melt$value),]
spawning_mekt
spawning_melt
spawning_melt = melt(spawning_map)#
spawning_melt=spawning_melt[-is.na(spawning_melt$value),]
spawning_melt
is.na(spawning_melt$value)
spawning_melt = melt(spawning_map)
-(is.na(spawning_melt$value))
spawning_melt[-(is.na(spawning_melt$value)),]
is.false(is.na(spawning_melt$value))
spawning_melt[(is.na(spawning_melt$value)==FALSE),]
spawning_melt=spawning_melt[(is.na(spawning_melt$value)==FALSE),]
dim(spawning_melt)[1]
spawning=function(broods, spawning_melt)#
	{#
	spawning_sites=dim(spawning_melt)[1]#
	return rmultinom(1, length(broods), rep(1/spawning_sites, spawning_sites)#
	}
spawning=function(broods, spawning_melt)#
	{#
	spawning_sites=dim(spawning_melt)[1]#
	return rmultinom(1, length(broods), rep(1/spawning_sites, spawning_sites))#
	}
spawning=function(broods, spawning_melt){#
	spawning_sites=dim(spawning_melt)[1]#
	return rmultinom(1, length(broods), rep(1/spawning_sites, spawning_sites))}
spawning=function(broods, spawning_melt){#
	spawning_sites=dim(spawning_melt)[1]
}
spawning=function(broods, spawning_melt){#
	spawning_sites=dim(spawning_melt)[1]#
	rmultinom(1, length(broods), rep(1/spawning_sites, spawning_sites))}
spawning(rpois(100, 100), spawning_melt)
spawning=function(egg_counts, spawning_melt){#
	# No. of spawning sites#
	spawning_sites=dim(spawning_melt)[1]#
	# How many spawners at each site? (Equal probability at each site)#
	spawners_per_site=rmultinom(1, length(egg_counts), rep(1/spawning_sites, spawning_sites))#
	# Randomize egg count ordering#
	egg_counts=sample(egg_counts)#
#
	# create indices to allocate `egg_counts` to `spawning_sites`#
	c(1, cumsum(spawners_per_site))}
spawning(rpois(100, 100), spawning_melt)
rmultinom(1, 1, c(0.5, 0.5))
as.vector(rmultinom(1, 1, c(0.5, 0.5)))
which(as.vector(rmultinom(1, 1, c(0.5, 0.5)))==1)
which(as.vector(rmultinom(1, 1, c(0.5, 0.5,0.5)))==1)
rmultinom(2, 1, c(0.5, 0.5))
rmultinom(3, 1, c(0.5, 0.5))
test1=rmultinom(3, 1, c(0.5, 0.5))
which(test1==1)
which(test1[,1]==1)
which(test1[,2]==1)
which(test1[,3]==1)
which(test1[,2]==1)
test1
test1 == 1
site_selection = (rmultinom(n, 1, rep(1/sites, sites)) == 1)
site_selection = (rmultinom(length(eggs), 1, rep(1/sites, sites)) == 1)
test2=(test1 == 1)
apply(test2, 2, which)
spawning=function(eggs, spawning_melt, time, event_db){#
	# Number of spawning `sites`#
	sites=dim(spawning_melt)[1]#
	# Assign sites to `eggs`#
	site_assignment = apply((rmultinom(length(eggs), 1, rep(1/sites, sites)) == 1), 2, which)#
#
	# Output data.frame, event_db == NULL if new simulation#
	if(event_db == NULL){#
		data.frame('agent_id'=1:length(eggs), #
				   'stage'='egg', #
				   'location'=site_assignment, #
				   'birth_d'=time, #
				   'num_alive'=eggs, #
				   'num_natural_death'=0, #
				   'num_anthro_death'=0)}#
	else{#
		rbind(event_db,#
		data.frame('agent_id'=(max(event_db$agent_id)+1):(max(event_db$agent_id)+length(eggs)),#
		 		   'stage'='egg', #
		 		   'location'=site_assignment, #
		 		   'birth_d'=time, #
		 		   'num_alive'=eggs, #
		 		   'num_natural_death'=0, #
		 		   'num_anthro_death'=0))}}
spawning(rpois(100,100), spawning_melt, 1, NULLL)
spawning(rpois(100,100), spawning_melt, 1, NULL)
spawning=function(eggs, spawning_melt, time, event_db){#
	# Number of spawning `sites`#
	sites=dim(spawning_melt)[1]#
	# Assign sites to `eggs`#
	site_assignment = apply((rmultinom(length(eggs), 1, rep(1/sites, sites)) == 1), 2, which)#
#
	# Output data.frame, event_db == NULL if new simulation#
	if(is.na(event_db)){#
		data.frame('agent_id'=1:length(eggs), #
				   'stage'='egg', #
				   'location'=site_assignment, #
				   'birth_d'=time, #
				   'num_alive'=eggs, #
				   'num_natural_death'=0, #
				   'num_anthro_death'=0)}#
	else{#
		rbind(event_db,#
		data.frame('agent_id'=(max(event_db$agent_id)+1):(max(event_db$agent_id)+length(eggs)),#
		 		   'stage'='egg', #
		 		   'location'=site_assignment, #
		 		   'birth_d'=time, #
		 		   'num_alive'=eggs, #
		 		   'num_natural_death'=0, #
		 		   'num_anthro_death'=0))}}
spawning(rpois(100,100), spawning_melt, 1, na)
spawning(rpois(100,100), spawning_melt, 1, NA)
spawning_melt
melt(spawning_map)
spawning=function(eggs, spawning_melt, time, event_db){#
	# Number of spawning `sites`#
	sites=dim(spawning_melt)[1]#
	# Assign sites to `eggs`#
	site_assignment = apply((rmultinom(length(eggs), 1, rep(1/sites, sites)) == 1), 2, which)#
#
	# Output data.frame, event_db == NULL if new simulation#
	if(is.na(event_db)){#
		data.frame('agent_id'=1:length(eggs), #
				   'stage'='egg', #
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
				   'birth_d'=time, #
				   'num_alive'=eggs, #
				   'num_natural_death'=0, #
				   'num_anthro_death'=0)}#
	else{#
		rbind(event_db,#
		data.frame('agent_id'=(max(event_db$agent_id)+1):(max(event_db$agent_id)+length(eggs)),#
		 		   'stage'='egg', #
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
		 		   'birth_d'=time, #
		 		   'num_alive'=eggs, #
		 		   'num_natural_death'=0, #
		 		   'num_anthro_death'=0))}}
melt(spawning_map)
spawning(rpois(100,100), spawning_melt, 1, NA)
spawning=function(eggs, spawning_melt, time, event_db){#
	# Number of spawning `sites`#
	sites=dim(spawning_melt)[1]#
	# Assign sites to `eggs`#
	site_assignment = apply((rmultinom(length(eggs), 1, rep(1/sites, sites)) == 1), 2, which)#
#
	# Output data.frame, event_db == NULL if new simulation#
	if(is.na(event_db)){#
		data.frame('agent_id'=1:length(eggs),#
				   'time'=time, #
				   'stage'='egg', #
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
				   'birth_d'=time, #
				   'num_alive'=eggs, #
				   'num_natural_death'=0, #
				   'num_anthro_death'=0)}#
	else{#
		rbind(event_db,#
		data.frame('agent_id'=(max(event_db$agent_id)+1):(max(event_db$agent_id)+length(eggs)),#
				   'time'=time,#
		 		   'stage'='egg', #
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
		 		   'birth_d'=time, #
		 		   'num_alive'=eggs, #
		 		   'num_natural_death'=0, #
		 		   'num_anthro_death'=0))}}
habitat_map = as.matrix(read.csv("masks/habitat.csv", header=F))#
colnames(habitat_map) = NULL#
habitat_melt = melt(habitat_map)#
habitat_melt=habitat_melt[(is.na(habitat_melt$value)==FALSE),]
table=spawning(rpois(100,100), spawning_melt, 1, NA)
table
is.numeric(table$time)
is.numeric(table[,1])
table$time
table$time > 0
table$time[table$time > 0]=NA
table$time
habitat_melt
names(habitat_melt)
rownames(habitat_melt)
test1=c(5, 3, 1, 6)
test2=c(1, 5, 3, 6)
test1==test2
spawning=function(eggs, spawning_melt, time, event_db){#
	# Number of spawning `sites`#
	sites=dim(spawning_melt)[1]#
	# Assign sites to `eggs`#
	site_assignment = apply((rmultinom(length(eggs), 1, rep(1/sites, sites)) == 1), 2, which)#
#
	# Output data.frame, event_db == NULL if new simulation#
	if(is.na(event_db)){#
		data.frame('agent_id'=1:length(eggs),#
				   'change_id'=1,#
				   'time'=time, #
				   'stage'='egg',#
				   'location_id'=rownames(spawning_melt)[site_assignment], #
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
				   'birth_d'=time, #
				   'num_alive'=eggs, #
				   'num_natural_death'=0, #
				   'num_anthro_death'=0)}#
	else{#
		rbind(event_db,#
		data.frame('agent_id'=(max(event_db$agent_id)+1):(max(event_db$agent_id)+length(eggs)),#
				   'change_id'=max(event_db$change_id)+1,#
				   'time'=time,#
		 		   'stage'='egg',#
		 		   'location_id'=rownames(spawning_melt)[site_assignment],#
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
		 		   'birth_d'=time, #
		 		   'num_alive'=eggs, #
		 		   'num_natural_death'=0, #
		 		   'num_anthro_death'=0))}}
table=spawning(rpois(100,100), spawning_melt, 1, NA)
preferability_fun(table$location_id)
preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}
preferability_fun(table$location_id)
preferability_fun(table$location_id[1])
preferability_fun(table$location_id[2])
preferability_fun(table$location_id[3])
preferability_fun(table$location_id[8])
apply(table$location_id, preferability_fun)
apply(table$location_id, FUN=preferability_fun)
?apply
lapply(table$location_id, FUN=preferability_fun)
sapply(table$location_id, FUN=preferability_fun)
rates=c(0.1, 0.2, 0.3)
test=sapply(table$location_id, FUN=preferability_fun)
rates[test]
NATURAL MORTALITY (LOCATION, STAGE)#
############################################################
#
natmortality(event_db, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event$change_id = sub_event$change_id + 1#
	sub_event$time = time#
	rbind(event_db, sub_event_db)#
	}
natmortality=function(event_db, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event$change_id = sub_event$change_id + 1#
	sub_event$time = time#
	rbind(event_db, sub_event_db)#
	}
nat_mortality_rates = c(0.1 0.2, 0.4)
nat_mortality_rates = c(0.1, 0.2, 0.4)
table
natmortality(table, habitat_melt, 1, nat_mortality_rates)
natmortality=function(event_db, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event$change_id = sub_event$change_id + 1#
	sub_event$time = time#
	rbind(event_db, sub_event_db)#
	}
natmortality(table, habitat_melt, 1, nat_mortality_rates)
natmortality=function(event_db, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event_db$change_id = sub_event$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
natmortality(table, habitat_melt, 1, nat_mortality_rates)
natmortality=function(event_db, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
natmortality(table, habitat_melt, 1, nat_mortality_rates)
anthro_mortality_rate = c(0.2)
anthro_map = as.matrix(read.csv("masks/anthro.csv", header=F))#
colnames(anthro_map) = NULL#
anthro_melt = melt(anthro_map)#
anthro_melt=anthro_melt[(is.na(anthro_melt$value)==FALSE),]
hgrid=read.csv("Blank.csv", header=F)
hgrid=read.csv("masks/Blank.csv", header=F)
hgrid[hgrid==0]=1#
hgrid[25, 34]=2#
write.table(hgrid2, "Anthro.csv", row.names=F, col.names=F, sep=",")
write.table(hgrid, "Anthro.csv", row.names=F, col.names=F, sep=",")
rbinom(1, 2, 0)
anthro_mortality_rate = c(0, 0.2)
egg_to_larvae=function(event_db, time)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
#
	# Update `event_db`#
	sub_event_db$stage[sub_event_db$stage == 'egg']='larvae'#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
egg_to_larvae(table, 1)
sub_event_db[table$stage=='egg']
table$stage[table$stage=='egg']
table$stage[table$stage=='egg']='larvae'
table$stage[table$stage=='egg']=as.factor('larvae')
as.vector(table$stage[table$stage=='egg'])
as.vector(table$stage)
table$stage
spawning=function(eggs, spawning_melt, time, event_db){#
	# Number of spawning `sites`#
	sites=dim(spawning_melt)[1]#
	# Assign sites to `eggs`#
	site_assignment = apply((rmultinom(length(eggs), 1, rep(1/sites, sites)) == 1), 2, which)#
#
	# Output data.frame, event_db == NULL if new simulation#
	if(is.na(event_db)){#
		data.frame('agent_id'=1:length(eggs),#
				   'change_id'=1,#
				   'time'=time, #
				   'stage'=rep('egg', length(eggs)),#
				   'location_id'=rownames(spawning_melt)[site_assignment], #
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
				   'birth_d'=time, #
				   'num_alive'=eggs, #
				   'num_natural_death'=0, #
				   'num_anthro_death'=0)}#
	else{#
		rbind(event_db,#
		data.frame('agent_id'=(max(event_db$agent_id)+1):(max(event_db$agent_id)+length(eggs)),#
				   'change_id'=max(event_db$change_id)+1,#
				   'time'=time,#
		 		   'stage'=rep('egg', length(eggs)),#
		 		   'location_id'=rownames(spawning_melt)[site_assignment],#
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
		 		   'birth_d'=time, #
		 		   'num_alive'=eggs, #
		 		   'num_natural_death'=0, #
		 		   'num_anthro_death'=0))}}
egg_to_larvae=function(event_db, time)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
#
	# Update `event_db`#
	sub_event_db$stage[sub_event_db$stage == 'egg']='larvae'#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
table=spawning(rpois(100,100), spawning_melt, 1, NA)
egg_to_larvae(table, 1)
spawning=function(eggs, spawning_melt, time, event_db){#
	# Number of spawning `sites`#
	sites=dim(spawning_melt)[1]#
	# Assign sites to `eggs`#
	site_assignment = apply((rmultinom(length(eggs), 1, rep(1/sites, sites)) == 1), 2, which)#
#
	# Output data.frame, event_db == NULL if new simulation#
	if(is.na(event_db)){#
		data.frame('agent_id'=1:length(eggs),#
				   'change_id'=1,#
				   'time'=time, #
				   'stage'=as.vector(rep('egg', length(eggs))),#
				   'location_id'=rownames(spawning_melt)[site_assignment], #
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
				   'birth_d'=time, #
				   'num_alive'=eggs, #
				   'num_natural_death'=0, #
				   'num_anthro_death'=0)}#
	else{#
		rbind(event_db,#
		data.frame('agent_id'=(max(event_db$agent_id)+1):(max(event_db$agent_id)+length(eggs)),#
				   'change_id'=max(event_db$change_id)+1,#
				   'time'=time,#
		 		   'stage'=as.vector(rep('egg', length(eggs))),#
		 		   'location_id'=rownames(spawning_melt)[site_assignment],#
				   'location_x'=spawning_melt$X2[site_assignment], #
				   'location_y'=spawning_melt$X1[site_assignment],#
		 		   'birth_d'=time, #
		 		   'num_alive'=eggs, #
		 		   'num_natural_death'=0, #
		 		   'num_anthro_death'=0))}}
table=spawning(rpois(100,100), spawning_melt, 1, NA)
egg_to_larvae(table, 1)
table$stage
as.vector(table$stage)
egg_to_larvae=function(event_db, time)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
#
	# Update `event_db`#
	sub_event_db$stage=as.vector(sub_event_db$stage)#
	sub_event_db$stage[sub_event_db$stage == 'egg']='larvae'#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
egg_to_larvae(table, 1)
larvae_to_juvenile=function(event_db, time)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==max(event_db$time)) & #
	                        (event_db$change_id==max(event_db$change_id)),]#
#
	# Update `event_db`#
	sub_event_db$stage=as.vector(sub_event_db$stage)#
	sub_event_db$stage[sub_event_db$stage == 'larvae']='juvenile'#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
ASSUMPTIONS & SIMULATION PARAMETERS#
############################################################
#
# Natural mortality assumptions by habitat preferability#
# 1, 2, and 3#
larval_nat_mortality_rates = c(0.2, 0.3, 0.5)#
juvenile_nat_mortality_rates = c(0.1, 0.2, 0.4)#
#
# Additional mortality in the presence and absence of #
# anthropogenic impact#
larval_anthro_mortality_rate = c(0, 0.2)#
juvenile_anthro_mortality_rate = c(0, 0.2)#
#
# Proportion of fish sexually mature at each age class#
prop_mature = c(0.1, 0.5, 0.9, 1, 1)#
#
# Eggs produced by a female of each age class, if sexually#
# mature (ages 2, 3, 4, 5, 6+)#
egg_num = c(7500, 15000, 20000, 22500, 25000)#
#
# Annual survivorship (ages 2-3, 3-4, 4-5, 5-6+, 6+-6+), #
# natural mortality only#
survivorship=c(0.35, 0.45, 0.4, 0.35, 0.2)#
#
# Initial age distribution, and simulation length (50 years)#
sim_length=50#
Age_Matrix=matrix(nrow=5, ncol=sim_length, 0)#
N[,1]=c(rpois(1, 30000), rpois(1, 20000), rpois(1, 15000), rpois(1, 10000), rpois(1, 8000))#
#
############################################################
# REQUIRED DATA & LIBRARIES#
############################################################
#
setwd("/Users/justin/Dropbox/Projects/[in progress] Fisheries ABM/")#
#
source("stock_events.R")#
source("individual_events.R")#
#
library(reshape)#
#
# Spawning map#
spawning_map = as.matrix(read.csv("masks/spawning.csv", header=F))#
colnames(spawning_map) = NULL#
spawning_melt = melt(spawning_map)#
spawning_melt=spawning_melt[(is.na(spawning_melt$value)==FALSE),]#
#
# Habitat preferability map#
habitat_map = as.matrix(read.csv("masks/habitat.csv", header=F))#
colnames(habitat_map) = NULL#
habitat_melt = melt(habitat_map)#
habitat_melt=habitat_melt[(is.na(habitat_melt$value)==FALSE),]#
#
# Anthropogenic effect map#
anthro_map = as.matrix(read.csv("masks/anthro.csv", header=F))#
colnames(anthro_map) = NULL#
anthro_melt = melt(anthro_map)#
anthro_melt=anthro_melt[(is.na(anthro_melt$value)==FALSE),]
Age_Matrix[,1]=c(rpois(1, 30000), rpois(1, 20000), rpois(1, 15000), rpois(1, 10000), rpois(1, 8000))
simulation.R#
# October 2014#
# Justin Angevaare#
############################################################
#
############################################################
# SCOPE:#
# This file illustrates the functions of #
# `individuals_events.R` and `stock_events.R` in the #
# simulation of a fish population. Assumptions of this #
# simulation are collected at the beggining of the file#
# for easy modification#
############################################################
#
############################################################
# ASSUMPTIONS & SIMULATION PARAMETERS#
############################################################
#
# Natural mortality assumptions by habitat preferability#
# 1, 2, and 3#
larval_nat_mortality_rates = c(0.2, 0.3, 0.5)#
juvenile_nat_mortality_rates = c(0.1, 0.2, 0.4)#
#
# Additional mortality in the presence and absence of #
# anthropogenic impact#
larval_anthro_mortality_rate = c(0, 0.2)#
juvenile_anthro_mortality_rate = c(0, 0.2)#
#
# Proportion of fish sexually mature at each age class#
prop_mature = c(0.1, 0.5, 0.9, 1, 1)#
#
# Eggs produced by a female of each age class, if sexually#
# mature (ages 2, 3, 4, 5, 6+)#
egg_num = c(7500, 15000, 20000, 22500, 25000)#
#
# Annual survivorship (ages 2-3, 3-4, 4-5, 5-6+, 6+-6+), #
# natural mortality only#
survivorship=c(0.35, 0.45, 0.4, 0.35, 0.2)#
#
# Initial age distribution, and simulation length (50 years)#
sim_length=50#
Age_Matrix=matrix(nrow=5, ncol=sim_length, 0)#
Age_Matrix[,1]=c(rpois(1, 30000), rpois(1, 20000), rpois(1, 15000), rpois(1, 10000), rpois(1, 8000))#
#
############################################################
# REQUIRED DATA & LIBRARIES#
############################################################
#
setwd("/Users/justin/Dropbox/Projects/[in progress] Fisheries ABM/")#
#
source("stock_events.R")#
source("individual_events.R")#
#
library(reshape)#
#
# Spawning map#
spawning_map = as.matrix(read.csv("masks/spawning.csv", header=F))#
colnames(spawning_map) = NULL#
spawning_melt = melt(spawning_map)#
spawning_melt=spawning_melt[(is.na(spawning_melt$value)==FALSE),]#
#
# Habitat preferability map#
habitat_map = as.matrix(read.csv("masks/habitat.csv", header=F))#
colnames(habitat_map) = NULL#
habitat_melt = melt(habitat_map)#
habitat_melt=habitat_melt[(is.na(habitat_melt$value)==FALSE),]#
#
# Anthropogenic effect map#
anthro_map = as.matrix(read.csv("masks/anthro.csv", header=F))#
colnames(anthro_map) = NULL#
anthro_melt = melt(anthro_map)#
anthro_melt=anthro_melt[(is.na(anthro_melt$value)==FALSE),]
rm(list=ls())
simulation.R#
# October 2014#
# Justin Angevaare#
############################################################
#
############################################################
# SCOPE:#
# This file illustrates the functions of #
# `individuals_events.R` and `stock_events.R` in the #
# simulation of a fish population. Assumptions of this #
# simulation are collected at the beggining of the file#
# for easy modification#
############################################################
#
############################################################
# ASSUMPTIONS & SIMULATION PARAMETERS#
############################################################
#
# Natural mortality assumptions by habitat preferability#
# 1, 2, and 3#
larval_nat_mortality_rates = c(0.2, 0.3, 0.5)#
juvenile_nat_mortality_rates = c(0.1, 0.2, 0.4)#
#
# Additional mortality in the presence and absence of #
# anthropogenic impact#
larval_anthro_mortality_rate = c(0, 0.2)#
juvenile_anthro_mortality_rate = c(0, 0.2)#
#
# Proportion of fish sexually mature at each age class#
prop_mature = c(0.1, 0.5, 0.9, 1, 1)#
#
# Eggs produced by a female of each age class, if sexually#
# mature (ages 2, 3, 4, 5, 6+)#
egg_num = c(7500, 15000, 20000, 22500, 25000)#
#
# Annual survivorship (ages 2-3, 3-4, 4-5, 5-6+, 6+-6+), #
# natural mortality only#
survivorship=c(0.35, 0.45, 0.4, 0.35, 0.2)#
#
# Initial age distribution, and simulation length (50 years)#
sim_length=50#
Age_Matrix=matrix(nrow=5, ncol=sim_length, 0)#
Age_Matrix[,1]=c(rpois(1, 30000), rpois(1, 20000), rpois(1, 15000), rpois(1, 10000), rpois(1, 8000))#
#
############################################################
# REQUIRED DATA & LIBRARIES#
############################################################
#
setwd("/Users/justin/Dropbox/Projects/[in progress] Fisheries ABM/")#
#
source("stock_events.R")#
source("individual_events.R")#
#
library(reshape)#
#
# Spawning map#
spawning_map = as.matrix(read.csv("masks/spawning.csv", header=F))#
colnames(spawning_map) = NULL#
spawning_melt = melt(spawning_map)#
spawning_melt=spawning_melt[(is.na(spawning_melt$value)==FALSE),]#
#
# Habitat preferability map#
habitat_map = as.matrix(read.csv("masks/habitat.csv", header=F))#
colnames(habitat_map) = NULL#
habitat_melt = melt(habitat_map)#
habitat_melt=habitat_melt[(is.na(habitat_melt$value)==FALSE),]#
#
# Anthropogenic effect map#
anthro_map = as.matrix(read.csv("masks/anthro.csv", header=F))#
colnames(anthro_map) = NULL#
anthro_melt = melt(anthro_map)#
anthro_melt=anthro_melt[(is.na(anthro_melt$value)==FALSE),]
t=1#
	# Produce eggs from adult population#
	eggs = egg_production(Age_Matrix, prop_mature, egg_num, t)
eggs
hist(eggs)
Natural mortality assumptions by habitat preferability#
# 1, 2, and 3#
egg_nat_mortality_rates = c(0.01, 0.01, 0.01)#
larval_nat_mortality_rates = c(0.2, 0.3, 0.5)#
juvenile_nat_mortality_rates = c(0.1, 0.2, 0.4)#
#
# Additional mortality in the presence and absence of #
# anthropogenic impact#
egg_anthro_mortality_rate = c(0, 0.1)#
larval_anthro_mortality_rate = c(0, 0.2)#
juvenile_anthro_mortality_rate = c(0, 0.2)
exp(log(0.7)/19)
1 - exp(log(0.7)/19)
.99^(52)
.98^19
adult_update=function(Age_Matrix, survivorship, event_db, time){#
	Age_Matrix[, t+1] = c(event_db$num_alive[(event_db$time==time) & #
	                     (event_db$stage=='adult'),],#
	                    rbinom(1, Age_Matrix[1,t], survivorship[1]),#
						rbinom(1, Age_Matrix[2,t], survivorship[2]),#
						rbinom(1, Age_Matrix[3,t], survivorship[3]),#
						rbinom(1, Age_Matrix[4,t], survivorship[4]) +#
						rbinom(1, Age_Matrix[5,t], survivorship[5]))#
	Age_Matrix}
Natural mortality assumptions by habitat preferability#
# 1, 2, and 3. Weekly egg mortality related to (1939 Price) #
egg_nat_mortality_rates = c(0.02, 0.02, 0.02)#
larval_nat_mortality_rates = c(0.02, 0.03, 0.05)#
juvenile_nat_mortality_rates = c(0.01, 0.02, 0.04)#
#
# Additional mortality in the presence and absence of #
# anthropogenic impact#
egg_anthro_mortality_rate = c(0, 0.01)#
larval_anthro_mortality_rate = c(0, 0.05)#
juvenile_anthro_mortality_rate = c(0, 0.05)
Produce eggs from adult population#
eggs = egg_production(Age_Matrix, prop_mature, egg_num, t)
Generate initial event_db based on eggs#
event_db=spawning(eggs, spawning_melt, t, NA)
for(w in 1:incubation){#
	event_db=nat_mortality(event_db, 'eggs', habitat_melt, t, egg_nat_mortality_rates)#
	event_db=nat_mortality(event_db, 'juvenile', habitat_melt, t, larval_nat_mortality_rates)#
	event_db=anthro_mortality(event_db, 'eggs', anthro_melt, t, egg_anthro_mortality_rates)#
	event_db=anthro_mortality(event_db, 'juvenile', anthro_melt, t, juvenile_anthro_mortality_rates)}
incubation = 19
for(w in 1:incubation){#
	event_db=nat_mortality(event_db, 'eggs', habitat_melt, t, egg_nat_mortality_rates)#
	event_db=nat_mortality(event_db, 'juvenile', habitat_melt, t, larval_nat_mortality_rates)#
	event_db=anthro_mortality(event_db, 'eggs', anthro_melt, t, egg_anthro_mortality_rates)#
	event_db=anthro_mortality(event_db, 'juvenile', anthro_melt, t, juvenile_anthro_mortality_rates)}
time = 1
time = 1#
stage = "egg"
event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]
Set time = 1 (year) so event database can be established#
t=1#
#
# Produce eggs from adult population#
eggs = egg_production(Age_Matrix, prop_mature, egg_num, t)	#
#
# Generate initial event_db based on eggs#
event_db=spawning(eggs, spawning_melt, t, NA)
for(w in 1:incubation){#
	event_db=nat_mortality(event_db, 'eggs', habitat_melt, t, egg_nat_mortality_rates)#
	event_db=anthro_mortality(event_db, 'eggs', anthro_melt, t, egg_anthro_mortality_rates)}
event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]
event_db=nat_mortality(event_db, 'eggs', habitat_melt, t, egg_nat_mortality_rates)
sub_event_db = event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]
dim(sub_event_db)
dim(event_db)
max(c(11,10,10))
max(c(10,10,10))
preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}
mortality_rate=nat_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]
mortality_rate=egg_nat_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]
binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}
deaths=sapply(1:length(mortality_rate), FUN = binomial_death)
sub_event_db$num_alive = sub_event_db$num_alive - deaths
sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths
sub_event_db$change_id = sub_event_db$change_id + 1
sub_event_db$time = time
rbind(event_db, sub_event_db)
event_db=nat_mortality(event_db, 'eggs', habitat_melt, t, egg_nat_mortality_rates)
?sapply
nat_mortality=function(event_db, stage, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db` specific to `stage`#
	sub_event_db = event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[as.vector(sapply(sub_event_db$location_id, preferability_fun))]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
event_db=nat_mortality(event_db, 'eggs', habitat_melt, t, egg_nat_mortality_rates)
t
sub_event_db = event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]
sub_event_db$location_id
is.vector(sub_event_db$location_id)
is.vector(event_db$location_id)
nat_mortality=function(event_db, stage, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db` specific to `stage`#
	sub_event_db = event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[sapply(as.vector(sub_event_db$location_id), preferability_fun)]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
event_db=nat_mortality(event_db, 'eggs', habitat_melt, t, egg_nat_mortality_rates)
nat_mortality=function(event_db, stage, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db` specific to `stage`#
	sub_event_db = event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[as.vector(sapply(as.vector(sub_event_db$location_id), preferability_fun))]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
event_db=nat_mortality(event_db, 'eggs', habitat_melt, t, egg_nat_mortality_rates)
nat_mortality=function(event_db, stage, habitat_melt, time, nat_mortality_rates)#
	{#
	# Load in latest portion of `event_db` specific to `stage`#
	sub_event_db = event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]#
	# Determine habitat preferability#
	preferability_fun=function(location_id){#
		habitat_melt$value[rownames(habitat_melt)==location_id]}#
	# Link habitat preferability to natural mortality rates#
	mortality_rate=nat_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_natural_death = sub_event_db$num_natural_death + deaths#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
stage='larvae'
sub_event_db = event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]
event_db=nat_mortality(event_db, 'egg', habitat_melt, t, egg_nat_mortality_rates)
event_db=anthro_mortality(event_db, 'egg', anthro_melt, t, egg_anthro_mortality_rates)
anthro_mortality=function(event_db, stage, anthro_melt, time, anthro_mortality_rates)#
	{#
	# Load in latest portion of `event_db` specific to `stage`#
	sub_event_db = event_db[(event_db$change_id==max(event_db$change_id[(event_db$time==time) & (event_db$stage==stage)])),]#
	# Determine location #
	anthro_fun=function(location_id){#
		anthro_melt$value[rownames(anthro_melt)==location_id]}#
	# Link location to special mortality rates#
	mortality_rate=anthro_mortality_rates[sapply(sub_event_db$location_id, preferability_fun)]#
	# Probabilistically cause death within each brood#
	binomial_death=function(x){#
		rbinom(1, sub_event_db$num_alive[x], mortality_rate[x])}#
	deaths=sapply(1:length(mortality_rate), FUN = binomial_death)#
	# Prepare to update `event_db`#
	sub_event_db$num_alive = sub_event_db$num_alive - deaths#
	sub_event_db$num_anthro_death = sub_event_db$num_anthro_death + deaths#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time#
	rbind(event_db, sub_event_db)#
	}
event_db=anthro_mortality(event_db, 'egg', anthro_melt, t, egg_anthro_mortality_rates)
egg_anthro_mortality_rate = c(0, 0.01)#
larval_anthro_mortality_rate = c(0, 0.05)#
juvenile_anthro_mortality_rate = c(0, 0.05)
event_db=spawning(eggs, spawning_melt, t, NA)#
#
# Weekly mortality and movement#
for(w in 1:incubation){#
	event_db=nat_mortality(event_db, 'egg', habitat_melt, t, egg_nat_mortality_rates)#
	event_db=anthro_mortality(event_db, 'egg', anthro_melt, t, egg_anthro_mortality_rate)#
	}
500000*20000
larvae_to_juvenile=function(event_db, time)#
	{#
	# Load in latest portion of `event_db`#
	sub_event_db = event_db[(event_db$time==time & #
	                        (event_db$change_id==max(event_db$change_id[(event_db$time == time) & (event_db$stage=='larvae')]))),]#
#
	# Update `event_db`#
	sub_event_db$stage=as.vector(sub_event_db$stage)#
	sub_event_db$stage[sub_event_db$stage == 'larvae']='juvenile'#
	sub_event_db$change_id = sub_event_db$change_id + 1#
	sub_event_db$time = time + 1 # Since this occurs at the end of each year...#
	rbind(event_db, sub_event_db)#
	}
dim(event_db)
max(event_db$change_id)
boxplot(event_db$num_alive[event_db$change_id==39])
event_db=egg_to_larvae(event_db, t)
event_db=nat_mortality(event_db, 'larvae', habitat_melt, t, larval_nat_mortality_rates)
event_db=anthro_mortality(event_db, 'larvae', anthro_melt, t, larval_anthro_mortality_rate)
event_db=juvenile_to_adult(event_db, t)
event_db[(event_db$time==time & #
	                        (event_db$change_id==max(event_db$change_id[(event_db$time == time) & (event_db$stage=='juvenile')]))),]
max(event_db$change_id[(event_db$time == time) & (event_db$stage=='juvenile')])
max(event_db$change_id[(event_db$time == 1) & (event_db$stage=='juvenile')])
max(event_db$change_id[event_db$stage=='juvenile'])
max(event_db$change_id)
summary(event_db$stage)
event_db=larvae_to_juvenile(event_db, t)
Age_Matrix=adult_update(Age_Matrix, survivorship, event_db, t)
adult_update=function(Age_Matrix, survivorship, event_db, time){#
	Age_Matrix[, t+1] = c(event_db$num_alive[(event_db$time==time) & #
	                     (event_db$stage=='adult')],#
	                    rbinom(1, Age_Matrix[1,t], survivorship[1]),#
						rbinom(1, Age_Matrix[2,t], survivorship[2]),#
						rbinom(1, Age_Matrix[3,t], survivorship[3]),#
						rbinom(1, Age_Matrix[4,t], survivorship[4]) +#
						rbinom(1, Age_Matrix[5,t], survivorship[5]))#
	Age_Matrix}
Age_Matrix=adult_update(Age_Matrix, survivorship, event_db, t)
adult_update=function(Age_Matrix, survivorship, event_db, time){#
	Age_Matrix[, t+1] = c(sum(event_db$num_alive[(event_db$time==time) & #
	                     (event_db$stage=='adult')]),#
	                    rbinom(1, Age_Matrix[1,t], survivorship[1]),#
						rbinom(1, Age_Matrix[2,t], survivorship[2]),#
						rbinom(1, Age_Matrix[3,t], survivorship[3]),#
						rbinom(1, Age_Matrix[4,t], survivorship[4]) +#
						rbinom(1, Age_Matrix[5,t], survivorship[5]))#
	Age_Matrix}
Age_Matrix=adult_update(Age_Matrix, survivorship, event_db, t)
Age_Matrix
event_db$num_alive[event_db$stage=="adult"]
summary(event_db$stage)
